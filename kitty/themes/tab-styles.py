import colorsys
from typing import Tuple
import subprocess
import glob
import sys
import json

RELEVANT_CONFIGS = ("active_tab_foreground", "active_tab_background",
    "inactive_tab_foreground", "inactive_tab_background")
CONFIG_HEADER = (
    "# START_AUTOGENERATED_TAB_STYLE\n"
    "# Feel free to update these colors manually and remove these comments.\n"
)
CONFIG_FOOTER = "# END_AUTOGENERATED_TAB_STYLE\n"


def hex_to_hls(hex_color) -> Tuple[float, float, float]:
    """Returns values from 0 to 1."""
    hex_color = hex_color.lstrip('#')

    r = int(hex_color[0:2], 16) / 255.0
    g = int(hex_color[2:4], 16) / 255.0
    b = int(hex_color[4:6], 16) / 255.0

    return colorsys.rgb_to_hls(r, g, b)


def rgb_to_hex(r: float, g: float, b: float) -> str:
    """Returns the #FF00C3 format"""
    r_int = int(round(r * 255))
    g_int = int(round(g * 255))
    b_int = int(round(b * 255))
    return "#{:02x}{:02x}{:02x}".format(r_int, g_int, b_int)


def parse_themes(paths):
    cp = subprocess.run(['kitten', '__parse_theme_metadata__'],
                        input='\n'.join(paths).encode('utf-8'), capture_output=True)
    if cp.returncode != 0:
        print(cp.stderr.decode('utf-8'), file=sys.stderr)
        raise SystemExit(cp.returncode)
    return json.loads(cp.stdout)


def should_update(theme) -> bool:
    if theme["name"] == "Default":
        return False

    if not theme.get("is_dark"):
        return False

    with open(theme["file"], "r") as f:
        content = f.read()

        if CONFIG_HEADER in content:
            # We want to update since maybe the update algorithm
            # changed.
            return True

        # If any of those configs is set, we will assume the style is
        # intentional and won't touch anything.
        return not any(conf in content for conf in RELEVANT_CONFIGS)


def make_darker(hex_color: str) -> str:
    hh, ll, ss = hex_to_hls(hex_color)
    rr, gg, bb = colorsys.hls_to_rgb(hh, ll * 0.8, ss)
    return rgb_to_hex(rr, gg, bb)


def make_lighter(hex_color: str) -> str:
    hh, ll, ss = hex_to_hls(hex_color)
    rr, gg, bb = colorsys.hls_to_rgb(hh, min(ll * 1.2, 1), ss)
    return rgb_to_hex(rr, gg, bb)


def get_lightness(hex_color: str) -> float:
    _, ll, _ = hex_to_hls(hex_color)
    return ll


def update(theme) -> None:
    print(f"Updating {theme['name']}...")

    with open(theme["file"]) as f:
        content = f.read()

    lines = content.splitlines()

    foreground = None
    background = None
    selection_background = None
    # selection_foreground = None

    # Extract relevant settings from the theme.
    for line in lines:
        line = line.strip()
        if not line or line.startswith("#"):
            continue

        parts = line.split()
        if len(parts) != 2:
            continue

        key, value = parts

        if value == "none":
            continue

        match key:
            case "foreground":
                foreground = value
            case "background":
                background = value
            case "selection_background":
                selection_background = value
            # case "selection_foreground":
            #     selection_foreground = value

    if not foreground or not background:
        print(f"!! Could not update {theme['name']} (no fg / bg).")
        return

    if selection_background:
        active_tab_background = selection_background
    else:
        active_tab_background = make_lighter(background)

    active_tab_foreground = "#eeeeee"
    if get_lightness(active_tab_background) > 0.7:
        active_tab_foreground = "#444444"

    inactive_tab_foreground = foreground
    inactive_tab_background = make_darker(background)

    assert not (
        active_tab_foreground == inactive_tab_foreground and
        active_tab_background == inactive_tab_background
    )

    config_values = CONFIG_HEADER + f"""active_tab_foreground   {active_tab_foreground}
active_tab_background   {active_tab_background}
inactive_tab_foreground {inactive_tab_foreground}
inactive_tab_background {inactive_tab_background}
""" + CONFIG_FOOTER

    if CONFIG_HEADER in content:
        # We need to fix up the exiting stuff.
        assert CONFIG_FOOTER in content
        pre_content, _, config_post_content = content.partition(CONFIG_HEADER)
        _, _, post_content = config_post_content.partition(CONFIG_FOOTER)

        with open(theme["file"], "w") as f:
            f.write(pre_content + config_values + post_content)
    else:
        # Just append to end of file.
        with open(theme["file"], "a") as f:
            f.write("\n" + config_values)


def main() -> None:
    files = glob.glob('themes/*.conf')
    parsed = parse_themes(files)
    for theme, td in zip(files, parsed):
        td['file'] = theme
    for theme in parsed:
        if should_update(theme):
            update(theme)
    print("\nDone :>")


if __name__ == "__main__":
    main()
